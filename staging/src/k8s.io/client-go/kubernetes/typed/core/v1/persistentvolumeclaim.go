/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	generic "k8s.io/client-go/generic"
	scheme "k8s.io/client-go/kubernetes/scheme"
)

// PersistentVolumeClaimsGetter has a method to return a PersistentVolumeClaimInterface.
// A group's client should implement this interface.
type PersistentVolumeClaimsGetter interface {
	PersistentVolumeClaims(namespace string) PersistentVolumeClaimInterface
}

// PersistentVolumeClaimInterface has methods to work with PersistentVolumeClaim resources.
type PersistentVolumeClaimInterface interface {
	generic.Interface[*v1.PersistentVolumeClaim, *v1.PersistentVolumeClaimList]
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	generic.StatusUpdater[*v1.PersistentVolumeClaim]
	generic.Applier[*v1.PersistentVolumeClaim, *corev1.PersistentVolumeClaimApplyConfiguration]
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	generic.StatusApplier[*v1.PersistentVolumeClaim, *corev1.PersistentVolumeClaimApplyConfiguration]
	PersistentVolumeClaimExpansion
}

// persistentVolumeClaims implements PersistentVolumeClaimInterface
type persistentVolumeClaims struct {
	*generic.TypeClientWithListAndApply[*v1.PersistentVolumeClaim, *v1.PersistentVolumeClaimList, *corev1.PersistentVolumeClaimApplyConfiguration]
}

// newPersistentVolumeClaims returns a PersistentVolumeClaims
func newPersistentVolumeClaims(c *CoreV1Client, namespace string) *persistentVolumeClaims {
	return &persistentVolumeClaims{
		generic.NewNamespacedWithListAndApply[*v1.PersistentVolumeClaim, *v1.PersistentVolumeClaimList, *corev1.PersistentVolumeClaimApplyConfiguration](
			"persistentvolumeclaims",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.PersistentVolumeClaim { return &v1.PersistentVolumeClaim{} },
			func() *v1.PersistentVolumeClaimList { return &v1.PersistentVolumeClaimList{} }),
	}
}
